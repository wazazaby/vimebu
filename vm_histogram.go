package vimebu

import (
	"fmt"

	"github.com/VictoriaMetrics/metrics"
)

// GetOrCreateHistogram calls [metrics.GetOrCreateHistogram] using the Builder's accumulated string as argument.
func (b *Builder) GetOrCreateHistogram() *metrics.Histogram {
	return metrics.GetOrCreateHistogram(b.String())
}

// GetOrCreateHistogramInSet calls [metrics.Set.GetOrCreateHistogram] using the Builder's accumulated string as argument.
func (b *Builder) GetOrCreateHistogramInSet(set *metrics.Set) *metrics.Histogram {
	return set.GetOrCreateHistogram(b.String())
}

// NewHistogram calls [metrics.NewHistogram] using the Builder's accumulated string as argument.
func (b *Builder) NewHistogram() *metrics.Histogram {
	return metrics.NewHistogram(b.String())
}

// NewHistogramInSet calls [metrics.Set.NewHistogram] using the Builder's accumulated string as argument.
func (b *Builder) NewHistogramInSet(set *metrics.Set) *metrics.Histogram {
	return set.NewHistogram(b.String())
}

// Methods with validation.

func (b *Builder) validateHistogram(set *metrics.Set, new bool) (*metrics.Histogram, error) {
	name := b.String()
	if err := metrics.ValidateMetric(name); err != nil {
		return nil, fmt.Errorf("invalid metric, err: %w", err)
	}
	if new {
		return set.NewHistogram(name), nil
	}
	return set.GetOrCreateHistogram(name), nil
}

// ValidateGetOrCreateHistogram calls [metrics.GetOrCreateHistogram] using the Builder's accumulated string as argument.
//
// It returns an error if the provided metric is invalid, as per the [metrics.ValidateMetric] function.
//
// This is useful when you want to avoid the runtime panic generated by VM when a metric is invalid.
func (b *Builder) ValidateGetOrCreateHistogram() (*metrics.Histogram, error) {
	return b.validateHistogram(metrics.GetDefaultSet(), false)
}

// ValidateGetOrCreateHistogramInSet calls [metrics.Set.GetOrCreateHistogram] using the Builder's accumulated string as argument.
//
// It returns an error if the provided metric is invalid, as per the [metrics.ValidateMetric] function.
//
// This is useful when you want to avoid the runtime panic generated by VM when a metric is invalid.
func (b *Builder) ValidateGetOrCreateHistogramInSet(set *metrics.Set) *metrics.Histogram {
	return set.GetOrCreateHistogram(b.String())
}

// ValidateNewHistogram calls [metrics.NewHistogram] using the Builder's accumulated string as argument.
//
// It returns an error if the provided metric is invalid, as per the [metrics.ValidateMetric] function.
//
// This is useful when you want to avoid the runtime panic generated by VM when a metric is invalid.
func (b *Builder) ValidateNewHistogram() (*metrics.Histogram, error) {
	return b.validateHistogram(metrics.GetDefaultSet(), true)
}

// ValidateNewHistogramInSet calls [metrics.Set.NewHistogram] using the Builder's accumulated string as argument.
//
// It returns an error if the provided metric is invalid, as per the [metrics.ValidateMetric] function.
//
// This is useful when you want to avoid the runtime panic generated by VM when a metric is invalid.
func (b *Builder) ValidateNewHistogramInSet(set *metrics.Set) (*metrics.Histogram, error) {
	return b.validateHistogram(set, true)
}

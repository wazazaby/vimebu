package vimebu

import (
	"fmt"

	"github.com/VictoriaMetrics/metrics"
)

// GetOrCreateGauge calls [metrics.GetOrCreateGauge] using the Builder's accumulated string as argument.
func (b *Builder) GetOrCreateGauge(f func() float64) *metrics.Gauge {
	return metrics.GetOrCreateGauge(b.String(), f)
}

// GetOrCreateGaugeInSet calls [metrics.Set.GetOrCreateGauge] using the Builder's accumulated string as argument.
func (b *Builder) GetOrCreateGaugeInSet(set *metrics.Set, f func() float64) *metrics.Gauge {
	return set.GetOrCreateGauge(b.String(), f)
}

// NewGauge calls [metrics.NewGauge] using the Builder's accumulated string as argument.
func (b *Builder) NewGauge(f func() float64) *metrics.Gauge {
	return metrics.NewGauge(b.String(), f)
}

// NewGaugeInSet calls [metrics.Set.NewGauge] using the Builder's accumulated string as argument.
func (b *Builder) NewGaugeInSet(set *metrics.Set, f func() float64) *metrics.Gauge {
	return set.NewGauge(b.String(), f)
}

// Methods with validation.

func (b *Builder) validateGauge(set *metrics.Set, f func() float64, new bool) (*metrics.Gauge, error) {
	name := b.String()
	if err := metrics.ValidateMetric(name); err != nil {
		return nil, fmt.Errorf("invalid metric, err: %w", err)
	}
	if new {
		return set.NewGauge(name, f), nil
	}
	return set.GetOrCreateGauge(name, f), nil
}

// ValidateGetOrCreateGauge calls [metrics.GetOrCreateGauge] using the Builder's accumulated string as argument.
//
// It returns an error if the provided metric is invalid, as per the [metrics.ValidateMetric] function.
//
// This is useful when you want to avoid the runtime panic generated by VM when a metric is invalid.
func (b *Builder) ValidateGetOrCreateGauge(f func() float64) (*metrics.Gauge, error) {
	return b.validateGauge(metrics.GetDefaultSet(), f, false)
}

// ValidateGetOrCreateGaugeInSet calls [metrics.Set.GetOrCreateGauge] using the Builder's accumulated string as argument.
//
// It returns an error if the provided metric is invalid, as per the [metrics.ValidateMetric] function.
//
// This is useful when you want to avoid the runtime panic generated by VM when a metric is invalid.
func (b *Builder) ValidateGetOrCreateGaugeInSet(set *metrics.Set, f func() float64) (*metrics.Gauge, error) {
	return b.validateGauge(set, f, false)
}

// ValidateNewGauge calls [metrics.NewGauge] using the Builder's accumulated string as argument.
//
// It returns an error if the provided metric is invalid, as per the [metrics.ValidateMetric] function.
//
// This is useful when you want to avoid the runtime panic generated by VM when a metric is invalid.
func (b *Builder) ValidateNewGauge(f func() float64) (*metrics.Gauge, error) {
	return b.validateGauge(metrics.GetDefaultSet(), f, true)
}

// ValidateNewGaugeInSet calls [metrics.Set.NewGauge] using the Builder's accumulated string as argument.
//
// It returns an error if the provided metric is invalid, as per the [metrics.ValidateMetric] function.
//
// This is useful when you want to avoid the runtime panic generated by VM when a metric is invalid.
func (b *Builder) ValidateNewGaugeInSet(set *metrics.Set, f func() float64) (*metrics.Gauge, error) {
	return b.validateGauge(set, f, true)
}

package vimebu

import (
	"fmt"
	"time"

	"github.com/VictoriaMetrics/metrics"
)

// GetOrCreateSummary calls [metrics.GetOrCreateSummary] using the Builder's accumulated string as argument.
func (b *Builder) GetOrCreateSummary() *metrics.Summary {
	return metrics.GetOrCreateSummary(b.String())
}

// GetOrCreateSummaryInSet calls [metrics.Set.GetOrCreateSummary] using the Builder's accumulated string as argument.
func (b *Builder) GetOrCreateSummaryInSet(set *metrics.Set) *metrics.Summary {
	return set.GetOrCreateSummary(b.String())
}

// NewSummary calls [metrics.NewSummary] using the Builder's accumulated string as argument.
func (b *Builder) NewSummary() *metrics.Summary {
	return metrics.NewSummary(b.String())
}

// NewSummaryInSet calls [metrics.Set.NewSummary] using the Builder's accumulated string as argument.
func (b *Builder) NewSummaryInSet(set *metrics.Set) *metrics.Summary {
	return set.NewSummary(b.String())
}

// GetOrCreateSummaryExt calls [metrics.GetOrCreateSummaryExt] using the Builder's accumulated string as argument.
func (b *Builder) GetOrCreateSummaryExt(window time.Duration, quantiles []float64) *metrics.Summary {
	return metrics.GetOrCreateSummaryExt(b.String(), window, quantiles)
}

// GetOrCreateSummaryExtInSet calls [metrics.Set.GetOrCreateSummaryExt] using the Builder's accumulated string as argument.
func (b *Builder) GetOrCreateSummaryExtInSet(set *metrics.Set, window time.Duration, quantiles []float64) *metrics.Summary {
	return set.GetOrCreateSummaryExt(b.String(), window, quantiles)
}

// NewSummaryExt calls [metrics.NewSummaryExt] using the Builder's accumulated string as argument.
func (b *Builder) NewSummaryExt(window time.Duration, quantiles []float64) *metrics.Summary {
	return metrics.NewSummaryExt(b.String(), window, quantiles)
}

// NewSummaryExtInSet calls [metrics.Set.NewSummaryExtInSet] using the Builder's accumulated string as argument.
func (b *Builder) NewSummaryExtInSet(set *metrics.Set, window time.Duration, quantiles []float64) *metrics.Summary {
	return set.NewSummaryExt(b.String(), window, quantiles)
}

// Methods with validation.

func (b *Builder) validateSummary(set *metrics.Set, new bool) (*metrics.Summary, error) {
	name := b.String()
	if err := metrics.ValidateMetric(name); err != nil {
		return nil, fmt.Errorf("invalid metric, err: %w", err)
	}
	if new {
		return set.NewSummary(name), nil
	}
	return set.GetOrCreateSummary(name), nil
}

func (b *Builder) validateSummaryExt(set *metrics.Set, window time.Duration, quantiles []float64, new bool) (*metrics.Summary, error) {
	name := b.String()
	if err := metrics.ValidateMetric(name); err != nil {
		return nil, fmt.Errorf("invalid metric, err: %w", err)
	}
	if new {
		return set.NewSummaryExt(name, window, quantiles), nil
	}
	return set.GetOrCreateSummaryExt(name, window, quantiles), nil
}

// ValidateGetOrCreateSummary calls [metrics.GetOrCreateSummary] using the Builder's accumulated string as argument.
//
// It returns an error if the provided metric is invalid, as per the [metrics.ValidateMetric] function.
//
// This is useful when you want to avoid the runtime panic generated by VM when a metric is invalid.
func (b *Builder) ValidateGetOrCreateSummary() (*metrics.Summary, error) {
	return b.validateSummary(metrics.GetDefaultSet(), false)
}

// ValidateGetOrCreateSummaryInSet calls [metrics.Set.GetOrCreateSummary] using the Builder's accumulated string as argument.
//
// It returns an error if the provided metric is invalid, as per the [metrics.ValidateMetric] function.
//
// This is useful when you want to avoid the runtime panic generated by VM when a metric is invalid.
func (b *Builder) ValidateGetOrCreateSummaryInSet(set *metrics.Set) (*metrics.Summary, error) {
	return b.validateSummary(set, false)
}

// ValidateNewSummary calls [metrics.NewSummary] using the Builder's accumulated string as argument.
//
// It returns an error if the provided metric is invalid, as per the [metrics.ValidateMetric] function.
//
// This is useful when you want to avoid the runtime panic generated by VM when a metric is invalid.
func (b *Builder) ValidateNewSummary() (*metrics.Summary, error) {
	return b.validateSummary(metrics.GetDefaultSet(), true)
}

// ValidateNewSummaryInSet calls [metrics.Set.NewSummary] using the Builder's accumulated string as argument.
//
// It returns an error if the provided metric is invalid, as per the [metrics.ValidateMetric] function.
//
// This is useful when you want to avoid the runtime panic generated by VM when a metric is invalid.
func (b *Builder) ValidateNewSummaryInSet(set *metrics.Set) (*metrics.Summary, error) {
	return b.validateSummary(set, true)
}

// ValidateGetOrCreateSummaryExt calls [metrics.GetOrCreateSummaryExt] using the Builder's accumulated string as argument.
//
// It returns an error if the provided metric is invalid, as per the [metrics.ValidateMetric] function.
//
// This is useful when you want to avoid the runtime panic generated by VM when a metric is invalid.
func (b *Builder) ValidateGetOrCreateSummaryExt(window time.Duration, quantiles []float64) (*metrics.Summary, error) {
	return b.validateSummaryExt(metrics.GetDefaultSet(), window, quantiles, false)
}

// ValidateGetOrCreateSummaryExtInSet calls [metrics.Set.GetOrCreateSummaryExt] using the Builder's accumulated string as argument.
//
// It returns an error if the provided metric is invalid, as per the [metrics.ValidateMetric] function.
//
// This is useful when you want to avoid the runtime panic generated by VM when a metric is invalid.
func (b *Builder) ValidateGetOrCreateSummaryExtInSet(set *metrics.Set, window time.Duration, quantiles []float64) (*metrics.Summary, error) {
	return b.validateSummaryExt(set, window, quantiles, false)
}

// ValidateNewSummaryExt calls [metrics.NewSummaryExt] using the Builder's accumulated string as argument.
//
// It returns an error if the provided metric is invalid, as per the [metrics.ValidateMetric] function.
//
// This is useful when you want to avoid the runtime panic generated by VM when a metric is invalid.
func (b *Builder) ValidateNewSummaryExt(window time.Duration, quantiles []float64) (*metrics.Summary, error) {
	return b.validateSummaryExt(metrics.GetDefaultSet(), window, quantiles, true)
}

// ValidateNewSummaryExtInSet calls [metrics.Set.NewSummaryExtInSet] using the Builder's accumulated string as argument.
//
// It returns an error if the provided metric is invalid, as per the [metrics.ValidateMetric] function.
//
// This is useful when you want to avoid the runtime panic generated by VM when a metric is invalid.
func (b *Builder) ValidateNewSummaryExtInSet(set *metrics.Set, window time.Duration, quantiles []float64) (*metrics.Summary, error) {
	return b.validateSummaryExt(set, window, quantiles, true)
}

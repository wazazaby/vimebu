package vimebu

import (
	"fmt"

	"github.com/VictoriaMetrics/metrics"
)

// GetOrCreateCounter calls [metrics.GetOrCreateCounter] using the Builder's accumulated string as argument.
func (b *Builder) GetOrCreateCounter() *metrics.Counter {
	return metrics.GetOrCreateCounter(b.String())
}

// GetOrCreateCounterInSet calls [metrics.Set.GetOrCreateCounter] using the Builder's accumulated string as argument.
func (b *Builder) GetOrCreateCounterInSet(set *metrics.Set) *metrics.Counter {
	return set.GetOrCreateCounter(b.String())
}

// NewCounter calls [metrics.NewCounter] using the Builder's accumulated string as argument.
func (b *Builder) NewCounter() *metrics.Counter {
	return metrics.NewCounter(b.String())
}

// NewCounterInSet calls [metrics.Set.NewCounter] using the Builder's accumulated string as argument.
func (b *Builder) NewCounterInSet(set *metrics.Set) *metrics.Counter {
	return set.NewCounter(b.String())
}

// Methods with validation.

func (b *Builder) validateCounter(set *metrics.Set, new bool) (*metrics.Counter, error) {
	name := b.String()
	if err := metrics.ValidateMetric(name); err != nil {
		return nil, fmt.Errorf("invalid metric, err: %w", err)
	}
	if new {
		return set.NewCounter(name), nil
	}
	return set.GetOrCreateCounter(name), nil
}

// ValidateGetOrCreateCounter calls [metrics.GetOrCreateCounter] using the Builder's accumulated string as argument.
//
// It returns an error if the provided metric is invalid, as per the [metrics.ValidateMetric] function.
//
// This is useful when you want to avoid the runtime panic generated by VM when a metric is invalid.
func (b *Builder) ValidateGetOrCreateCounter() (*metrics.Counter, error) {
	return b.validateCounter(metrics.GetDefaultSet(), false)
}

// ValidateGetOrCreateCounterInSet calls [metrics.Set.GetOrCreateCounter] using the Builder's accumulated string as argument.
//
// It returns an error if the provided metric is invalid, as per the [metrics.ValidateMetric] function.
//
// This is useful when you want to avoid the runtime panic generated by VM when a metric is invalid.
func (b *Builder) ValidateGetOrCreateCounterInSet(set *metrics.Set) (*metrics.Counter, error) {
	return b.validateCounter(set, false)
}

// ValidateNewCounter calls [metrics.NewCounter] using the Builder's accumulated string as argument.
//
// It returns an error if the provided metric is invalid, as per the [metrics.ValidateMetric] function.
//
// This is useful when you want to avoid the runtime panic generated by VM when a metric is invalid.
func (b *Builder) ValidateNewCounter() (*metrics.Counter, error) {
	return b.validateCounter(metrics.GetDefaultSet(), true)
}

// ValidateNewCounterInSet calls [metrics.Set.NewCounter] using the Builder's accumulated string as argument.
//
// It returns an error if the provided metric is invalid, as per the [metrics.ValidateMetric] function.
//
// This is useful when you want to avoid the runtime panic generated by VM when a metric is invalid.
func (b *Builder) ValidateNewCounterInSet(set *metrics.Set) (*metrics.Counter, error) {
	return b.validateCounter(set, true)
}
